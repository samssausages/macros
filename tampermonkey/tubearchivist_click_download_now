// ==UserScript==
// @name         TubeArchivist - Click All Download Now, Ignore, Delete, Add to Queue, and Forget
// @namespace
// @version      0.8
// @description  Manually trigger clicking "Download Now", "Ignore", "Delete", "Add to queue", and "Forget" for all downloads on Page
// @author       SamSausage
// @match        https://tube.saraschfamily.com/downloads/*
// @grant        none
// ==/UserScript==

(function() {
    'use strict';

    // Function to check if an element is visible
    function isElementVisible(elem) {
        const style = window.getComputedStyle(elem);
        if (style.display === 'none') return false;
        if (style.visibility !== 'visible') return false;
        if (elem.offsetWidth + elem.offsetHeight + elem.getBoundingClientRect().height +
            elem.getBoundingClientRect().width === 0) {
            return false;
        }
        return true;
    }

    // Function to check if a button type exists
    function buttonExists(textContent, selector) {
        return Array.from(document.querySelectorAll(selector)).some(button =>
            button.textContent.trim() === textContent && isElementVisible(button)
        );
    }

    let buttons = {};
    let topPosition = 10;

    // Function to create buttons with double-click functionality
    function createDoubleClickButton(originalText, actionFunction) {
        let button = document.createElement('button');
        button.textContent = originalText;
        button.style = `position: fixed; top: ${topPosition}px; right: 10px; z-index: 1000;`;
        button.clicks = 0;

        button.onclick = function() {
            if (this.clicks === 0) {
                this.style.backgroundColor = 'red';
                this.textContent = 'Confirm';
                this.clicks = 1;
            } else if (this.clicks === 1) {
                actionFunction();
                this.style.backgroundColor = ''; // Reset the style
                this.textContent = originalText;  // Reset text
                this.clicks = 0;
            }
        };

        buttons[originalText] = button; // Store for later reference if needed
        document.body.appendChild(button);
        topPosition += 28;
    }

    if (buttonExists("Download now", 'button')) {
        createDoubleClickButton('Click All Download Now', runRequeueDownload);
    }

    if (buttonExists("Add to queue", 'button[data-id]')) {
        createDoubleClickButton('Click All Add to Queue', runRequeueQueue);
    }

    if (buttonExists("Ignore", 'button')) {
        createDoubleClickButton('Click All Ignore', runRequeueIgnore);
    }

    if (buttonExists("Delete", 'button.danger-button')) {
        createDoubleClickButton('Click All Delete', runRequeueDelete);
    }

    if (buttonExists("Forget", 'button[data-id]')) {
        createDoubleClickButton('Click All Forget', runRequeueForget);
    }

    // Action functions remain the same
    function runRequeueDownload() {
        var buttons = document.querySelectorAll('button');
        buttons.forEach(function(button) {
            if (button.textContent === "Download now" && isElementVisible(button)) {
                button.click();
                setTimeout(() => {}, 200); // A quarter second delay between clicks
            }
        });
    }

    function runRequeueIgnore() {
        var buttons = document.querySelectorAll('button');
        buttons.forEach(function(button) {
            if (button.textContent === "Ignore" && isElementVisible(button)) {
                button.click();
                setTimeout(() => {}, 200); // A quarter second delay between clicks
            }
        });
    }

    function runRequeueDelete() {
        var buttons = document.querySelectorAll('button.danger-button');
        buttons.forEach(function(button) {
            if (button.textContent === "Delete" && isElementVisible(button)) {
                button.click();
                setTimeout(() => {}, 200); // A quarter second delay between clicks
            }
        });
    }

    function runRequeueQueue() {
        var buttons = document.querySelectorAll('button[data-id]');
        buttons.forEach(function(button) {
            if (button.textContent === "Add to queue" && isElementVisible(button)) {
                button.click();
                setTimeout(() => {}, 200); // A quarter second delay between clicks
            }
        });
    }

    function runRequeueForget() {
        var buttons = document.querySelectorAll('button[data-id]');
        buttons.forEach(function(button) {
            if (button.textContent === "Forget" && isElementVisible(button)) {
                button.click();
                setTimeout(() => {}, 200); // A quarter second delay between clicks
            }
        });
    }
})();
